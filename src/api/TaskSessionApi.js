/**
 * ProIn.WebApi
 * This is a ProIn data access WebApi
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zwq00000@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelStateDictionary from '../model/ModelStateDictionary';
import PagedTaskSessions from '../model/PagedTaskSessions';
import TaskSession from '../model/TaskSession';

/**
* TaskSession service.
* @module api/TaskSessionApi
* @version 1.0.0
*/
export default class TaskSessionApi {

    /**
    * Constructs a new TaskSessionApi. 
    * @alias module:api/TaskSessionApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * create a TaskSession
     * 测量完成后，提交测量结果
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskSession} opts.taskSession measureTeask and values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createTaskSessionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['taskSession'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/taskSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * create a TaskSession
     * 测量完成后，提交测量结果
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskSession} opts.taskSession measureTeask and values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createTaskSession(opts) {
      return this.createTaskSessionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取测量任务分页列表
     * 获取已经完成的测量任务列表
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of items returned (default to 20)
     * @param {Number} opts.pageNumber Page number (default to 0)
     * @param {String} opts.partId 工件Id
     * @param {Date} opts.startDate Task start Data Range,,if empty use today
     * @param {Date} opts.endDate Task end Data Range,if empty use today
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PagedTaskSessions} and HTTP response
     */
    getMeasureTasksWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'pageNumber': opts['pageNumber'],
        'partId': opts['partId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PagedTaskSessions;

      return this.apiClient.callApi(
        '/taskSessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * 获取测量任务分页列表
     * 获取已经完成的测量任务列表
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of items returned (default to 20)
     * @param {Number} opts.pageNumber Page number (default to 0)
     * @param {String} opts.partId 工件Id
     * @param {Date} opts.startDate Task start Data Range,,if empty use today
     * @param {Date} opts.endDate Task end Data Range,if empty use today
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PagedTaskSessions}
     */
    getMeasureTasks(opts) {
      return this.getMeasureTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get a taskSession by sessionId
     * @param {Number} ssid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaskSession} and HTTP response
     */
    getTaskSessionWithHttpInfo(ssid) {
      let postBody = null;

      // verify the required parameter 'ssid' is set
      if (ssid === undefined || ssid === null) {
        throw new Error("Missing the required parameter 'ssid' when calling getTaskSession");
      }


      let pathParams = {
        'ssid': ssid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TaskSession;

      return this.apiClient.callApi(
        '/taskSessions/{ssid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get a taskSession by sessionId
     * @param {Number} ssid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaskSession}
     */
    getTaskSession(ssid) {
      return this.getTaskSessionWithHttpInfo(ssid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
