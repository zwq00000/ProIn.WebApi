/**
 * ProIn.WebApi
 * This is a ProIn data access WebApi
 *
 * OpenAPI spec version: 1.0.0
 * Contact: zwq00000@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CpSpec from '../model/CpSpec';
import ModelStateDictionary from '../model/ModelStateDictionary';

/**
* CpSpec service.
* @module api/CpSpecApi
* @version 1.0.0
*/
export default class CpSpecApi {

    /**
    * Constructs a new CpSpecApi. 
    * @alias module:api/CpSpecApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a CpSpec
     * Adds a new CpSpec to the CpSpecs list.
     * @param {String} specId The CpSpec Id
     * @param {Object} opts Optional parameters
     * @param {module:model/CpSpec} opts.cpSpec The cpspec to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CpSpec} and HTTP response
     */
    createCpspecWithHttpInfo(specId, opts) {
      opts = opts || {};
      let postBody = opts['cpSpec'];

      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling createCpspec");
      }


      let pathParams = {
        'specId': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CpSpec;

      return this.apiClient.callApi(
        '/cpspec/{specId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creates a CpSpec
     * Adds a new CpSpec to the CpSpecs list.
     * @param {String} specId The CpSpec Id
     * @param {Object} opts Optional parameters
     * @param {module:model/CpSpec} opts.cpSpec The cpspec to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CpSpec}
     */
    createCpspec(specId, opts) {
      return this.createCpspecWithHttpInfo(specId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * delete a CpSpec
     * @param {String} specId The CpSpec Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCpspecWithHttpInfo(specId) {
      let postBody = null;

      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling deleteCpspec");
      }


      let pathParams = {
        'specId': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/cpspec/{specId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * delete a CpSpec
     * @param {String} specId The CpSpec Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCpspec(specId) {
      return this.deleteCpspecWithHttpInfo(specId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get a cpspec
     * @param {String} specId The CpSpec Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CpSpec} and HTTP response
     */
    getCpspecWithHttpInfo(specId) {
      let postBody = null;

      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling getCpspec");
      }


      let pathParams = {
        'specId': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CpSpec;

      return this.apiClient.callApi(
        '/cpspec/{specId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get a cpspec
     * @param {String} specId The CpSpec Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CpSpec}
     */
    getCpspec(specId) {
      return this.getCpspecWithHttpInfo(specId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get a cpspec list in thie workpiece
     * @param {String} partId the Workpiece PartId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CpSpec>} and HTTP response
     */
    getCpspecsByPartIdWithHttpInfo(partId) {
      let postBody = null;

      // verify the required parameter 'partId' is set
      if (partId === undefined || partId === null) {
        throw new Error("Missing the required parameter 'partId' when calling getCpspecsByPartId");
      }


      let pathParams = {
        'partId': partId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [CpSpec];

      return this.apiClient.callApi(
        '/workpieces/{partId}/cpspecs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get a cpspec list in thie workpiece
     * @param {String} partId the Workpiece PartId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CpSpec>}
     */
    getCpspecsByPartId(partId) {
      return this.getCpspecsByPartIdWithHttpInfo(partId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * modify a cpspec
     * @param {String} specId The CpSpec Id
     * @param {module:model/CpSpec} cpspec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CpSpec} and HTTP response
     */
    updateCpspecWithHttpInfo(specId, cpspec) {
      let postBody = cpspec;

      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling updateCpspec");
      }

      // verify the required parameter 'cpspec' is set
      if (cpspec === undefined || cpspec === null) {
        throw new Error("Missing the required parameter 'cpspec' when calling updateCpspec");
      }


      let pathParams = {
        'specId': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CpSpec;

      return this.apiClient.callApi(
        '/cpspec/{specId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * modify a cpspec
     * @param {String} specId The CpSpec Id
     * @param {module:model/CpSpec} cpspec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CpSpec}
     */
    updateCpspec(specId, cpspec) {
      return this.updateCpspecWithHttpInfo(specId, cpspec)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
